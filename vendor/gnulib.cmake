# quick-lint-js finds bugs in JavaScript programs.
# Copyright (C) 2020  Matthew Glazar
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

include(CheckIncludeFile)

add_library(
  gnulib-getopt
  gnulib/lib/getopt.c
  gnulib/lib/getopt1.c
)
target_include_directories(
  gnulib-getopt
  PUBLIC
  "${CMAKE_CURRENT_BINARY_DIR}/include"
  gnulib/lib
  PRIVATE
  "${CMAKE_CURRENT_BINARY_DIR}/private-include"
)
target_compile_definitions(
  gnulib-getopt
  PUBLIC
  __GETOPT_PREFIX=quick_lint_js_
)

# The following functions are a port of portions of gnulib's build system (e.g.
# gnulib/lib/Makefile.am).

function (build_config_h)
  file(READ gnulib/m4/gnulib-common.m4 GNULIB_COMMON_M4_CONTENT)
  set(CONFIG_H_CONTENT "")
  function (extract_gnulib_common_m4_section SECTION_NAME NEXT_SECTION_NAME)
    # Read the body of an AH_VERBATIM call in gnulib/m4/gnulib-common.m4.
    string(
      REGEX MATCH
      "AH_VERBATIM\\(\\[${SECTION_NAME}\\],[ \n]*\\[(.*)\\]\\)[ \n]*AH_VERBATIM\\(\\[${NEXT_SECTION_NAME}\\]"
      _UNUSED
      "${GNULIB_COMMON_M4_CONTENT}"
    )
    set(GNULIB_MACROS "${CMAKE_MATCH_1}")
    string(REGEX REPLACE "\n]dnl[^\n]+\n\\[" "" GNULIB_MACROS "${GNULIB_MACROS}")
    set(CONFIG_H_CONTENT "${CONFIG_H_CONTENT}\n${GNULIB_MACROS}" PARENT_SCOPE)
  endfunction ()
  extract_gnulib_common_m4_section(_GL_GNUC_PREREQ _Noreturn)
  extract_gnulib_common_m4_section(attribute async_safe)
  file(
    WRITE
    "${CMAKE_CURRENT_BINARY_DIR}/private-include/config.h"
    "/* This file was generated by ${CMAKE_CURRENT_FUNCTION_LIST_FILE} */\n${CONFIG_H_CONTENT}"
  )
endfunction ()
build_config_h()

function (build_getopt_h)
  set(GUARD_PREFIX QUICK_LINT_JS)
  set(HAVE_GETOPT_H 0)
  set(INCLUDE_NEXT error)
  set(NEXT_GETOPT_H)
  set(PRAGMA_COLUMNS)
  set(PRAGMA_SYSTEM_HEADER)

  file(READ gnulib/lib/arg-nonnull.h ARG_NONNULL_H_CONTENT)
  file(READ gnulib/lib/getopt.in.h GETOPT_H_CONTENT)
  string(CONFIGURE "${GETOPT_H_CONTENT}" GETOPT_H_CONTENT @ONLY)
  string(
    REGEX REPLACE
    "(definition of _GL_ARG_NONNULL[^\n]*\n)"
    "\\1${ARG_NONNULL_H_CONTENT}"
    GETOPT_H_CONTENT
    "${GETOPT_H_CONTENT}"
  )
  string(
    REGEX REPLACE
    "\n# *include <unistd\\.h>" "\n"
    GETOPT_H_CONTENT
    "${GETOPT_H_CONTENT}"
  )
  file(
    WRITE
    "${CMAKE_CURRENT_BINARY_DIR}/include/getopt.h"
    "/* This file was generated by ${CMAKE_CURRENT_FUNCTION_LIST_FILE} */\n${GETOPT_H_CONTENT}"
  )
endfunction ()
build_getopt_h()

function (build_getopt_cdefs_h)
  set(HAVE_SYS_CDEFS_H 0)
  configure_file(
    gnulib/lib/getopt-cdefs.in.h
    "${CMAKE_CURRENT_BINARY_DIR}/include/getopt-cdefs.h"
    @ONLY
  )
endfunction ()
build_getopt_cdefs_h()

function (build_unistd_h)
  check_include_file(unistd.h QUICK_LINT_JS_HAVE_UNISTD_H)
  if (NOT "${QUICK_LINT_JS_HAVE_UNISTD_H}")
    file(
      WRITE
      "${CMAKE_CURRENT_BINARY_DIR}/private-include/unistd.h"
      "/* Stub <unistd.h> to make getopt.c compile */"
    )
  endif ()
endfunction ()
build_unistd_h()
