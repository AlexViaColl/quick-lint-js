#!/usr/bin/env python3

# quick-lint-js finds bugs in JavaScript programs.
# Copyright (C) 2020  Matthew Glazar
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""Test quick-lint-js with test262.

https://github.com/tc39/test262
"""

import argparse
import itertools
import json
import os
import pathlib
import pipes
from qljs_external_test_suite import match_path, run_quick_lint_js
import subprocess
import sys
import typing
import unittest


TODO_TEST_FILES = ()


def main() -> None:
    arg_parser = argparse.ArgumentParser(__doc__)
    arg_parser.add_argument("quick_lint_js_exe")
    arg_parser.add_argument("test262_directory")
    args = arg_parser.parse_args()

    quick_lint_js_executable = pathlib.Path(args.quick_lint_js_exe)
    test262_fixture_directory = pathlib.Path(args.test262_directory).resolve()

    test_files = []
    for root, dirs, files in os.walk(test262_fixture_directory):
        root = pathlib.Path(root)
        for file in files:
            if file.endswith(".case") or file.endswith(".js"):
                test_file = root / file
                if should_check_test_file(test_file):
                    test_files.append(test_file)
    test_files = sorted(test_files)

    for test_file in test_files:
        lint_result = run_quick_lint_js(
            quick_lint_js_executable=quick_lint_js_executable, js_file=test_file
        )
        if lint_result.crashed:
            lint_result.dump()
            exit(1)


def should_check_test_file(test_file: pathlib.Path) -> bool:
    return not is_todo(test_file)


def is_todo(path: pathlib.Path) -> bool:
    return any(
        match_path(pattern=todo_pattern, path=path) for todo_pattern in TODO_TEST_FILES
    )


if __name__ == "__main__":
    main()
